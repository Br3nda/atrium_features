<?php

/**
 * Update for Kit compliance
 */
function atrium_blog_update_6001() {
  $ret = array();

  $components = array(
    'views' => array(
      'atrium_blog' => array(
        'atrium_blog_listing' => array(
          'block_1',
          'block_2',
        ),
      ),
    ),
    'contexts' => array(
      'spaces-feature-blog' => 'blog_listing',
    ),
  );
   
 $ret[] = atrium_kit_comply('views', $components); 
 $ret[] = atrium_kit_comply('context', $components);
 return $ret;

}

/**
 * 
 * @param array $type
 *   The type of component.  Accepted types are 'views' and 'context'
 * @param array $info
 * 
 * 
 * Component array should look something like:
 * 
 *
 * $components = array(
 *   'views' => array(
 *     'atrium_blog' => array(
 *       'atrium_blog_listing' => array(
 *         'block_1',
 *         'block_2',
 *       ),
 *     ),
 *   ),
 *   'contexts' => array(
 *     'spaces-feature-blog' => 'blog_listing',
 *   ),
 * );
 *
 * 
 * 
 */
function atrium_kit_comply($type, $info) {
  $ret = array();
  switch ($type) {
    // Handles changes to views blocks.
    case 'views':
      $views = $info['views'];
      $contexts = $info['contexts'];
      foreach ($views as $old_view => $new_view) {
        $view = views_get_view($old);
        // Proceed if view is not overridden.
        if ($view->type == 'Default') {
          // Go block by block and update spaces_dashboards, spaces_presets, and context.
          foreach ($new_view as $block) {
            // Replace block names in spaces_dashboard
            $query = db_query("SELECT * FROM {spaces_overrides} WHERE object_type = 'context' AND object_id LIKE '%%spaces_dashboard%%'");
            while ($result = db_fetch_object($query)) {
              $value = str_replace("views-$old_view-$block", "views-$new_view-$block", $result->value);
              $value = str_replace("$old_view-$block", "$new_view-$block", $result->value);
              if ($value != $result->value) {
                $ret[] = db_query("UPDATE {spaces_overrides} SET value = '%s' WHERE type = '%s' AND id = %d", $value, $result->type, $result->id);
              }
            }
            // Replace block names in spaces_presets
            $query = db_query("SELECT * FROM {spaces_presets}");
            while ($result = db_fetch_object($query)) {
              $value = str_replace("views-$old_view-$block", "views-$new_view-$block", $result->value);
              $value = str_replace("$old_view-$block", "$new_view-$block", $result->value);
              if ($value != $result->value) {
                $ret[] = db_query("UPDATE {spaces_presets} SET value = '%s' WHERE name = '%s'", $value, $result->name);
              }
            }
            // Replace block names in contexts
            if (!empty($contexts)) {
              foreach ($contexts as $current => $replacement) {
                $query = db_query("SELECT * FROM {context} WHERE name = '%s'", $current);
                while ($result = db_fetch_object($query)) {
                  $reactions = str_replace("views-$old_view-$block", "views-$new_view-$block", $result->reactions);
                  $reactions = str_replace("$old_view-$block", "$new_view-$block", $result->reactions);
                  $conditions = str_replace($current, $replacement, $result->conditions);
                  if ($reactions != $result->reactions || $conditions != $result->conditions) {
                    $ret[] = db_query("UPDATE {context} SET conditions = '%s', reactions = '%s' WHERE name = '%s'", $conditions, $reactions, $current);
                  }
                }
              }
            }
          }
        }
      }
      return $ret;
    case 'context':
      $contexts = $info['contexts'];
      foreach ($contexts as $old => $new) {
        $ret[] = db_query("UPDATE {context} SET name = '%s' WHERE name = '%s'", $new, $old);
        return $ret;
      }
      break;
  }

}





