<?php

include_once('atrium_groups.features.inc');

/**
 * Implementation of hook_enable().
 */
function atrium_groups_enable() {
  ctools_export_set_status('spaces_presets', 'og_private', TRUE);
  ctools_export_set_status('spaces_presets', 'og_controlled', TRUE);
  ctools_export_set_status('spaces_presets', 'og_public', TRUE);
}

/**
 * Implementation of hook_init().
 */
function atrium_groups_init() {
  // Views: disable views that we are 'overriding'
  $views_defaults = variable_get('views_defaults', array());
  $disabled = array(
    'og',
    'og_my',
    'og_files',
    'og_ghp_ron',
    'og_mytracker',
    'og_members_block',
    'og_search',
    'og_tracker',
    'og_recent_type_term',
    'og_unread',
  );
  $set = FALSE;
  foreach ($disabled as $view_name) {
    if (empty($views_defaults[$view_name])) {
      $set = TRUE;
      $views_defaults[$view_name] = TRUE;
    }
  }
  if ($set) {
    variable_set('views_defaults', $views_defaults);
  }
}

/**
 * Implementation of hook_views_api().
 */
function atrium_groups_views_api() {
  return array('api' => 2);
}

/**
 * Implementation of hook_menu_alter().
 */
function atrium_groups_menu_alter(&$items) {
  // Kill undesirable menu items
  $yank = array(
    'og/activity',
  );
  foreach ($yank as $path) {
    if (!empty($items[$path])) {
      unset($items[$path]);
    }
  }
}

/**
 * Generates an array of admin links for the current space suitable
 * for use in theme_links().
 */
function atrium_groups_admin_links($space = NULL) {
  $space = !isset($space) ? spaces_get_space() : $space;
  if ($space && $space->type == 'og' && $space->access_admin()) {
    $links = array();
    $item = menu_get_item("og/users/{$space->id}/faces");
    if ($item && $item['access']) {
      $links['members'] = array(
        'title' => t('Members'),
        'href' => "og/users/{$space->id}/faces",
      );
    }

    $item = menu_get_item("node/{$space->sid}/edit");
    if ($item && $item['access']) {
      // Add settings link for administering spaces
      $links['settings'] = array(
        'title' => t('@type settings', array('@type' => node_get_types('name', $space->group->type))),
        'href' => "node/{$space->id}/edit",
      );
    }

    $item = menu_get_item("node/{$space->id}/spaces/features");
    if ($item && $item['access']) {
      $links['features'] = array(
        'title' => t('Customize features'),
        'href' => "node/{$space->id}/spaces/features",
      );
    }
    drupal_alter('atrium_groups_admin_links', $links, $space);
    return $links;
  }
  return array();
}

/**
 * Generates an array of user links for the current space suitable
 * for use in theme_links().
 */
function atrium_groups_user_links($space = NULL) {
  $space = !isset($space) ? spaces_get_space() : $space;
  if ($space && $space->type == 'og' && $space->access_space()) {
    // TODO revist this
    if ($subscribe = spaces_og_subscription_link()) {
      $links['subscribe'] = $subscribe;
    }
    drupal_alter('atrium_groups_user_links', $links, $space);
    return $links;
  }
  return array();
}

/**
 * Implementation of hook_block
 */
function atrium_groups_block($op, $delta = 0) {
  if ($op == 'list') {
    return array(
      'user_links' => array(
        'info' => t('Atrium groups: user links'),
      ),
      'admin_links' => array(
        'info' => t('Atrium groups: administrator links'),
      ),
    );
  }
  elseif ($op == 'view') {
    switch ($delta) {
      case 'user_links':
         if ($links = atrium_groups_user_links()) {
          return array(
            'subject' => t('Membership'),
            'content' => theme('links', $links),
          );
        }
      break;
      case 'admin_links':
        if ($links = atrium_groups_admin_links()) {
          return array(
            'subject' => t('Settings'),
            'content' => theme('links', $links),
          );
        }
      break;
    }
    return array(); 
  }
}
/**
 * Implementation of hook_active_contexts_alter().
 *
 * Use hook_active_contexts_alter() as a good occasion to set the breadcrumb.
 */
function atrium_groups_context_active_contexts_alter(&$contexts) {
  $space = spaces_get_space();
  if ($space->type == 'og') {
    $breadcrumb = array(
      l(t('Home'), '<front>', array('purl' =>array('disabled' => TRUE))),
      l(t('Groups'), 'groups', array('purl' =>array('disabled' => TRUE))),
      l($space->title, '<front>'),
    );
    drupal_set_breadcrumb($breadcrumb);
  }
  else if ($space->type == 'site' && context_get('spaces', 'feature') == 'groups') {
    $breadcrumb = array(
      l(t('Home'), '<front>', array('purl' =>array('disabled' => TRUE))),
      l(t('Groups'), 'groups', array('purl' =>array('disabled' => TRUE))),
    );
    drupal_set_breadcrumb($breadcrumb);
  }
}

/**
 * Implementation of hook_context_links_alter().
 */
function atrium_groups_context_links_alter(&$links) {
  $feature = context_get('spaces', 'feature');
  switch ($feature) {
    case 'groups':
      if (node_access('create', 'group')) {
        $links['atrium_groups'] = array(
          'title' => t('Group'),
          'href' => 'node/add/group',
        );
      }
      break;
  }
}
