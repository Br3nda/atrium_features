<?php

include_once('atrium_intranet.features.inc');

/**
 * Implementation of hook_views_api().
 */
function atrium_intranet_views_api() {
  return array('api' => 2);
}

/**
 * Implementation of hook_menu_alter().
 */
function atrium_intranet_menu_alter(&$items) {
  // Kill undesirable menu items
  $yank = array(
    'book',
    'rss.xml',
    'node/%node/outline',
  );
  foreach ($yank as $path) {
    if (!empty($items[$path])) {
      unset($items[$path]);
    }
  }

  // Replace default 403
  $items['access-denied']['page callback'] = 'atrium_intranet_403';
}

/**
 * Implementation of hook_link_alter().
 */
function atrium_intranet_link_alter(&$links, $node) {
  if (!empty($links['comment_new_comments']) && !empty($links['comment_comments'])) {
    unset($links['comment_comments']);
  }
}

/**
 * Implementation of hook_nodeapi().
 */
function atrium_intranet_nodeapi(&$node, $op, $teaser = NULL, $page = NULL) {
  switch ($op) {
    case 'view':
      // Load the node's read state.
      if (!isset($node->new)) {
        global $user;
        $readtime = db_result(db_query("SELECT timestamp FROM {history} WHERE uid = %d AND nid = %d", $user->uid, $node->nid));
        $node->new = atrium_intranet_get_readstate($readtime, $node->changed);
      }
      break;
  }
}

/**
 * Implementation of hook_block().
 */
function atrium_intranet_block($op = 'list', $delta = 0) {
  switch ($op) {
    case 'list':
      return array(
        'spacelinks' => array('info' => t('Atrium Intranet: Space links')),
        'create' => array('info' => t('Atrium Intranet: Create content')),
        'account' => array('info' => t('Atrium Intranet: User account')),
        'help' => array('info' => t('Atrium Intranet: Help')),
      );
    case 'view':
      switch ($delta) {
        case 'spacelinks':
          // @TODO: spaces_admin_link() is deprecated/missing.
          // $links = spaces_admin_links();
          if (!empty($links)) {
            return array('subject' => "<span class='icon'></span> ". t('Settings'), 'content' => theme('links', $links));
          }
          break;
        case 'create':
          $space = spaces_get_space();
          $feature_map = spaces_features_map('node');
          $item = menu_get_item('node/add');
          if ($space) {
            $links = array();
            foreach (system_admin_menu_block($item) as $menu_item) {
              $args = explode('/', $menu_item['href']);
              $type = str_replace('-', '_', array_pop($args));
              if (isset($feature_map[$type]) && $space->access_feature('create', $feature_map[$type])) {
                $feature = $feature_map[$type];
                $menu_item['title'] = "<span class='spaces-feature feature-{$feature}'></span>{$menu_item['title']}";
                $menu_item['html'] = TRUE;
                $links["$feature-{$type}"] = $menu_item;
              }
            }
            ksort($links);
            return array('subject' => "<span class='icon'></span> {$item['title']}", 'content' => theme('links', $links));
          }
          break;
        case 'account':
          global $user;
          if ($user->uid) {
            // Clone account so we can generate a large user pic
            $account = drupal_clone($user);
            $account->imagecache_preset = 'user-m';
            $info_big = theme('user_picture', $account) . theme('username', $account);
            $info_small = theme('user_picture', $user) . check_plain($user->name);

            // @TODO: spaces_admin_link() is deprecated/missing.
            // $links = spaces_admin_links(spaces_load('user', $account->uid));
            $links = array();

            // For PURL prefixing onto these links since they might be
            // used from anywhere.
            foreach ($links as $k => $v) {
              $links[$k]['purl'] = array('provider' => 'spaces_user', 'id' => $account->uid);
            }
            // Logout can stay in space.
            $links['logout'] = menu_get_item('logout');

            return array('subject' => $info_small, 'content' => "<div class='user-info clear-block'>{$info_big}</div>" . theme('links', $links));
          }
          else {
            $item = menu_get_item('user/login');
            if ($item && $item['access']) {
              return array('content' => l($item['title'], $item['href']));
            }
          }
          break;
        case 'help':
          if ($helptext = theme('help')) {
            return array('subject' => t('Need help?'), 'content' => $helptext);
          }
          break;
      }
      break;
  }
}

/**
 * Implementation of hook_litenode().
 */
function atrium_intranet_litenode() {
  $info = array();
  $info['atrium'] = array();
  $info['atrium']['module'] = t('Atrium');
  $info['atrium']['map'] = array();
  $info['atrium']['fields'] = array(
    'timestamp_1' => array(
      'id' => 'timestamp_1',
      'table' => 'history_user',
      'field' => 'timestamp',
    ),
  );
  return $info;
}

/**
 * Implementation of hook_litenode_alter().
 */
function atrium_intranet_litenode_alter(&$node, $row) {
  $node->new = atrium_intranet_get_readstate($row->history_user_timestamp, $node->changed);
}

/**
 * Helper function to deal with node read state logic.
 */
function atrium_intranet_get_readstate($readtime, $nodetime) {
  if ($readtime == 0 && $nodetime > NODE_NEW_LIMIT) {
    return MARK_NEW;
  }
  elseif ($nodetime > $readtime && $nodetime > NODE_NEW_LIMIT) {
    return MARK_UPDATED;
  }
  return MARK_READ;
}

/**
 * Implementation of hook_form_alter().
 */
function atrium_intranet_form_alter(&$form, &$form_state, $form_id) {
  // Disable notifications when editing a post outside of a group space
  if ((!empty($form['#node']) || $form_id == 'comment_form') && isset($form['notifications'])) {
    $space = spaces_get_space();
    if (empty($space) || $space->type != 'og') {
      $form['notifications']['#access'] = FALSE;
    }
  }

  // Node form customizations/niceties
  if ($form['#id'] == 'node-form') {
    // Even if you have the perms, we don't want you messing with this stuff
    $disable = array('menu', 'comment_settings');
    foreach ($disable as $key) {
      if (!empty($form[$key])) {
        $form[$key]['#access'] = FALSE;
      }
    }
  }
}

/**
 * Implementation of hook_form_alter() for comment_form.
 */
function atrium_intranet_form_comment_form_alter(&$form) {
  if (!drupal_get_title()) drupal_set_title(t('Reply'));
  // Shrink comment field -- people don't have much to say usually
  $form['comment_filter']['comment']['#rows'] = 8;
}

/**
 * 403 page.
 */
function atrium_intranet_403() {
  // If we're in intranet mode, send anonymous users to a login screen.
  global $user;
  if (!$user->uid && !user_access('access content')) {
    // drupal_access_denied() sets the $_REQUEST['destination'] which will
    // prevent drupal_goto from behaving as expected. So we unset it.
    unset($_REQUEST['destination']);
    drupal_goto('user/login', 'destination='. $_REQUEST['q']);
  }
  return "<div class='access-denied'>". t('You are not authorized to access this page.') ."</div>";
}

/**
 * Implementation of hook_spaces_admin_links_alter().
 */
function atrium_intranet_spaces_admin_links_alter(&$links, $space) {
  switch ($space->type) {
    case 'user':
      // @TODO: If menu.inc had a real API function for this we would use it, but
      // as of now we'd have a copy hand paste hack job of menu_local_tasks()...
      $paths = array(
        "user/{$space->sid}/edit" => t('Account settings'),
        "user/{$space->sid}/groups" => '',
        "user/{$space->sid}/notifications" => '',
        "user/{$space->sid}/openid" => '',
      );
      foreach ($paths as $path => $title) {
        $item = menu_get_item($path);
        if ($item && $item['access']) {
          $class = seed_id_safe($item['href']);
          $links[$class] = array(
            'title' => !empty($title) ? $title : $item['title'],
            'href' => $item['href'],
          );
        }
      }
      break;
  }
}

/**
 * Implementation of hook_context_default_contexts_alter().
 */
function atrium_intranet_context_default_contexts_alter(&$contexts) {
  if (module_exists('spaces_dashboard')) {
    $contexts['spaces_dashboard']->reactions['block']['blocks'] = array(
      'views-atrium_intranet-block_3' => array(
        'module' => 'views',
        'delta' => 'atrium_intranet-block_3',
        'region' => 'content',
        'weight' => 0,
      ),
      'views-atrium_groups-block_2' => array(
        'module' => 'views',
        'delta' => 'atrium_groups-block_2',
        'region' => 'right',
        'weight' => 0,
      ),
    );
  }
  // Conditionally add the notifications UI subscription block.
  if (module_exists('notifications_ui') && !empty($contexts['atrium-intranet-global'])) {
    $contexts['atrium-intranet-global']->reactions['block']['blocks']['notifications_ui_0'] = array(
      'module' => 'notifications_ui',
      'delta' => '0',
      'weight' => 48,
      'region' => 'page_tools',
    );
  }
}
