<?php

include_once('atrium_members.features.inc');

/**
 * Implementation of hook_enable().
 */
function atrium_members_enable() {
  // Spaces presets
  $default_presets = variable_get('spaces_default_presets', array());
  $default_presets['user'] = 'atrium_user_simple';
  variable_set('spaces_default_presets', $default_presets);
}

/**
 * Implementation of hook_views_api().
 */
function atrium_members_views_api() {
  return array('api' => 2);
}

/**
 * Implementation of hook_block().
 */
function atrium_members_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list':
      return array('addform' => array('info' => t('User add form')));
    case 'view':
      if (atrium_members_addform_access()) {
        $space = spaces_get_space();
        return array('subject' => t('Add existing users'), 'content' => drupal_get_form('atrium_members_addform', $space->group));
      }
      break;
  }
}

/**
 * Implementation of hook_theme().
 */
function atrium_members_theme() {
  return array(
    'atrium_members_addform' => array('arguments' => array('form' => array())),
  );
}

/**
 * Form for adding existing members to a group.
 */
function atrium_members_addform($form_state, $group) {
  $form = array('#theme' => 'atrium_members_addform');
  $form['messages'] = array('#type' => 'markup');

  // Provide the page View for AJAX reload action.
  if ($display = views_get_page_view()) {
    if ($display->get_option('use_ajax')) {
      $form['view'] = array(
        '#type' => 'hidden',
        '#value' => "{$display->view->name}:{$display->view->current_display}",
        '#attributes' => array('class' => 'atrium-members-addform-view'),
      );
    }
  }

  $form['group'] = array(
    '#type' => 'value',
    '#value' => $group,
  );
  $form['username'] = array(
    '#type' => 'textfield',
    '#title' => t('Username'),
    '#default_value' => '',
    '#autocomplete_path' => 'user/autocomplete',
    '#description' => '',
  );
  $form['add'] = array(
    '#type' => 'submit',
    '#value' => t('Add to group'),
    '#submit' => array('atrium_members_addform_submit'),
    '#ahah' => array(
      'path' => 'members/add/ajax',
      'wrapper' => 'atrium-members-addform-messages',
      'method' => 'replace',
      'effect' => 'none',
    ),
  );
  return $form;
}

/**
 * Theme function for atrium_members_addform().
 */
function theme_atrium_members_addform($form) {
  drupal_add_js(drupal_get_path('module', 'atrium_members') .'/atrium_members.js');
  $output .= "<div id='atrium-members-addform-messages'>";
  $output .= drupal_render($form['messages']);
  $output .= "</div>";
  $output .= drupal_render($form);
  return "<div class='atrium-members-addform'>{$output}</div>";
}

function atrium_members_addform_access() {
  $space = spaces_get_space();
  return user_access('create users') && $space && $space->type == 'og';
}

function atrium_members_addform_submit(&$form, &$form_state) {
  if ($uid = db_result(db_query("SELECT uid FROM {users} WHERE name = '%s'", $form_state['values']['username']))) {
    if ($account = user_load($uid)) {
      og_save_subscription($form_state['values']['group']->nid, $account->uid, array('is_active' => 1));
      drupal_set_message(t('Subscribed user %name to %group.', array('%name' => $account->name, '%group' => $form_state['values']['group']->title)));
    }
  }
}

/**
 * AJAX/AHAH callback for user addform submission.
 */
function atrium_members_addform_ajax() {
  if ($form = form_get_cache($_POST['form_build_id'], $form_state)) {
    // Build submitted values.
    $form_state = array('values' => $_POST);
    foreach (element_children($form) as $key) {
      if ($form[$key]['#type'] === 'value' && isset($form[$key]['#value'])) {
        $form_state['values'][$key] = $form[$key]['#value'];
      }
    }
    // Submit the form & retrieve messages.
    atrium_members_addform_submit($form, $form_state);
    $output = theme('status_messages');
    drupal_json(array('status' => TRUE, 'data' => $output));
    exit();
  }
  drupal_json(array('status' => FALSE, 'data' => ''));
  exit();  
}

/**
 * Implementation of hook_menu().
 */
function atrium_members_menu() {
  return array(
    'members/add/ajax' => array(
      'page callback' => 'atrium_members_addform_ajax',
      'page arguments' => array(),
      'access callback' => 'atrium_members_addform_access',
      'access arguments' => array(),
      'type' => MENU_CALLBACK,
    ),
  );
}

/**
 * Implementation of hook_menu_alter().
 */
function atrium_members_menu_alter(&$items) {
  $dummy = array();
  $categories = module_invoke('atrium_members', 'user', 'categories', $dummy, $dummy);

  foreach ($categories as $category) {
    $item = $items['user/%user_category/edit/'. $category['name']];
    $item['page callback'] = 'drupal_get_form';
    $item['page arguments'] = array('atrium_members_user_profile_tab', 1, $category['name']);
    $items['user/%user_category/edit/'. $category['name']] = $item;
  }

  // Clone ucreate item into members/user-add.
  if (isset($items['user/add'])) {
    $items['members/add'] = $items['user/add'];
    $items['members/add']['type'] = MENU_LOCAL_TASK;
    $items['members/add']['weight'] = 10;
  }

  // Views: disable views that we are 'overriding'
  $views_defaults = variable_get('views_defaults', array());
  $disabled = array(
    'og_members',
    'og_members_block',
    'og_members_faces',
  );
  $set = FALSE;
  foreach ($disabled as $view_name) {
    if (empty($views_defaults[$view_name])) {
      $set = TRUE;
      $views_defaults[$view_name] = TRUE;
    }
  }
  if ($set) {
    variable_set('views_defaults', $views_defaults);
  }

  // Replace the OG users callback.
  $items['og/users/%'] = array(
    'page callback' => 'atrium_members_og_users',
    'page arguments' => array(),
    'access callback' => TRUE,
    'access arguments' => array(TRUE),
    'type' => MENU_CALLBACK,
  );
}

function atrium_members_og_users() {
  menu_set_active_item('members');
  return menu_execute_active_handler();
}

/**
 * Implementation of hook_context_links_alter().
 */
function atrium_members_context_links_alter(&$links) {
  if (context_get('context', 'spaces-feature-members') && module_exists('ucreate') && user_access('create users')) {
    $item = menu_get_item('members/add');
    if ($item['access']) {
      $links['atrium_users'] = array(
        'title' => $item['title'],
        'href' => $item['href'],
      );
    }
  }
}

/**
 * Implementation of hook_context_page_reaction().
 * Good occasion to set the breadcrumb.
 */
function atrium_members_context_page_reaction() {
  $space = spaces_get_space();
  if ($space->type == 'user') {
    $breadcrumb = array(l(t('Home'), '<front>'));
    $item = menu_get_item('members');
    if ($item['access']) {
      $breadcrumb[] = l($item['title'], $item['href']);
    }
    $item = menu_get_item("user/{$space->id}");
    if ($item['access']) {
      $breadcrumb[] = l($space->title(), $item['href']);
    }
    drupal_set_breadcrumb($breadcrumb);
  }
  else if (context_get('context', 'spaces-feature-members')) {
    $breadcrumb = array(l(t('Home'), '<front>'));
    $item = menu_get_item('members');
    if ($item['access']) {
      $breadcrumb[] = l($item['title'], $item['href']);
    }
    drupal_set_breadcrumb($breadcrumb);
  }
}

/**
 * Implementation of hook_form_alter() for user_profile_form.
 */
function atrium_members_form_user_profile_form_alter(&$form) {
  $dummy = array();
  $categories = module_invoke('atrium_members', 'user', 'categories', $dummy, $dummy);
  foreach ($categories as $info) {
    if (!empty($form[$info['name']])) {
      $form[$info['name']]['#access'] = FALSE;
    }
  }
  $form['comment_settings']['#type'] = 'hidden';
}

/**
 * Implementation of hook_views_pre_view().
 */
function atrium_members_views_pre_view(&$view) {
  switch ($view->name) {
    case 'atrium_members':
      $filters = $view->display_handler->get_option('filters');
      foreach ($filters as $id => $filter) {
        if ("{$filter['table']}:{$filter['field']}" == 'og_uid:uid') {
          // If user may view user outside their group memberships,
          // yank the og_uid filter.
          if (user_access('view users outside groups')) {
            unset($filters[$id]);
          }
          // Otherwise, enforce the filter.
          else {
            $filters[$id]['value'] = 1;
          }
          $view->display_handler->set_option('filters', $filters);
          break;
        }
      }
      break;
  }
}

/**
 * Implementation of hook_user().
 */
function atrium_members_user($op, &$edit, &$account, $category = NULL) {
  switch ($op) {
    case 'categories':
      $categories = array();
      // Check that user pictures are enabled.
      if (variable_get('user_pictures', 0)) {
        $categories['picture'] = array(
          'name' => 'picture',
          'title' => 'Picture',
          'weight' => 10,
        );
      }
      // Check that user can select a theme and that there are options for her to select from.
      if (user_access('select different theme')) {
        $enabled = array();
        foreach (list_themes() as $theme) {
          if ($theme->status && !empty($theme->info['atrium'])) {
            $enabled[] = $theme;
          }
        }
        if (count($enabled) > 1) {
          $categories['theme_select'] = array(
            'name' => 'theme_select',
            'title' => 'Theme settings',
            'weight' => 10,
          );
        }
      }
      return $categories;
  }
}

/**
 * Form callback that generates only the portion of the user profile form that is requested.
 */
function atrium_members_user_profile_tab($form_state, $account, $tab) {
  module_load_include('inc', 'user', 'user.pages');
  $form = user_profile_form($form_state, $account);
  $form['#submit'] = array('user_profile_form_submit');
  foreach (element_children($form) as $k) {
    if ($k == $tab || $form[$k]['#type'] == 'submit') {
      $form[$k]['#access'] = TRUE;
    }
    else {
      $form[$k]['#access'] = FALSE;
    }
  }
  if (isset($form['delete'])) {
    $form['delete']['#access'] = FALSE;
  }
  return $form;
}
