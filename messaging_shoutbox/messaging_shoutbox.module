<?php
// $Id$
/**
 * @file
 * Messaging shoutbox module
 * 
 * This module provides a shoutbox node type, displayable in a block.
 * 
 * NOTE: All comments added as shouts will be marked unpublished ($comment->status == 1)
 * so that they are excluded from most other queries & views that display comments.
 *
 * (c) Development Seed, 2007-2008
 * http://www.developmentseed.org
 *
 */

/**
 * Implementation of hook_init()
 */
function messaging_shoutbox_init() {
  drupal_add_css(drupal_get_path('module', 'messaging_shoutbox') .'/messaging_shoutbox.css');
}

/**
 * Implementation of hook_menu()
 */
function messaging_shoutbox_menu() {
  $items = array();  
  $items['shoutbox/js'] = array(
    'description' => 'Shoutbox AJAX submission callback.',
    'page callback' => 'messaging_shoutbox_ajax',
    'access arguments' => array('post messages to shoutbox'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implementation of hook_node_info().
 */
function messaging_shoutbox_node_info() {
  return array(
    'shoutbox' => array(
      'name' => t('Shoutbox'),
      'module' => 'messaging_shoutbox',
      'description' => t('A shoutbox for informal message blasts.'),
      'title_label' => t('Name'),
      'body_label' => t('Description'),
    )
  );
}

/**
 * Implementation of hook_perm().
 */
function messaging_shoutbox_perm() {
  return array('create shoutbox', 'post messages to shoutbox', 'subscribe to shoutbox');
}

/**
 * Implementation of hook_access().
 */
function messaging_shoutbox_access($op, $node, $account) {
  switch ($op) {
    case 'create':
    case 'delete':
    case 'update':
      return user_access('create shoutbox', $account);
    default:
      return TRUE;
  }
}

/**
 * Implementation of hook_form().
 */
function messaging_shoutbox_form(&$node) {
  $type = node_get_types('type', $node);
  $form['title'] = array('#type' => 'textfield', '#title' => check_plain($type->title_label), '#required' => TRUE, '#default_value' => !empty($node->title) ? $node->title : NULL, '#weight' => -5);
  $form['body_field'] = node_body_field($node, $type->body_label, $type->min_word_count);
  return $form;
}

/**
 * Node prepare, just disable comments
 */
function messaging_shoutbox_load(&$node) {
  $node->shoutbox = $node->nid;
  unset($node->comment);
}

/**
 * Node view
 */
function messaging_shoutbox_view($node, $teaser = FALSE, $page = FALSE) {
  $node = node_prepare($node, $teaser);
  if ($page) {
    $node->content['shoutbox'] = array(
      '#value' => views_embed_view('messaging_shoutbox_shouts', 'block_2', $node->nid),
      '#weight' => 1,
    );
  }

  return $node;
}

/**
 * Shoutbox AJAX callback
 */
function messaging_shoutbox_ajax($op = 'shout') {
  // Disable any devel output
  global $user, $devel_shutdown;
  $devel_shutdown = FALSE;

  switch ($op) {
    case 'full': // Requested full comment
    case 'shout': // Submitted shout
    default:
      $form_state = array('values' => $_POST);
      if (($nid = $form_state['values']['nid']) && !empty($form_state['values']['shout'])) {
        messaging_shoutbox_shout($nid, array('text' => $form_state['values']['shout'], 'uid' => $user->uid));
      }
      // Return a DOM element that indicates to our JS behaviors that the
      // request is complete.
      print drupal_to_js(array('status' => TRUE, 'data' => "<div class='messaging-shoutbox-ajax'></div>"));
  }
  exit();
}

/**
 * Save shoutbox as comment
 * 
 * Store the whole comment but trim the subject to a shorter text
 */
function messaging_shoutbox_shout($nid, $shout) {
  $comment = $shout;
  $comment['nid'] = $nid;

  // See comment_save() for the thread building code.
  $max = db_result(db_query('SELECT MAX(thread) FROM {comments} WHERE nid = %d', $nid));
  $max = rtrim($max, '/');
  $thread = int2vancode(vancode2int($max) + 1) .'/';

  $comment += array(
    'nid' => $nid,
    'comment' => $shout['text'],
    'timestamp' => time(),
    'uid' => 0, // Defaults to anonymous
    'status' => COMMENT_NOT_PUBLISHED,
    'thread' => $thread,
  );
  // Retrieve the username to store with the comment
  if (!empty($comment['uid']) && ($account = user_load(array('uid' => $comment['uid'])))) {
    $comment['name'] = $account->name;
  }
  // The body may be in any format, so we:
  // 1) Filter it into HTML
  // 2) Strip out all HTML tags
  // 3) Convert entities back to plain-text.
  // Note: format is checked by check_markup().
  if (trim($shout['subject']) == '') {
    $subject = decode_entities(strip_tags(filter_xss($shout['text'], array())));
    $subject = truncate_utf8($subject, 63, TRUE, FALSE);
    $comment['subject'] = $subject;
  }
  drupal_write_record('comments', $comment);

}

/**
 * Implementation of hook_block()
 */
function messaging_shoutbox_block($op = 'list', $delta = 0) {
  if ($op == 'list') {
    $blocks = array();
    foreach (messaging_shoutbox_list() as $item) {
      $blocks[$item->nid] = array(
        'info' => t('Shoutbox: @name', array('@name' => $item->title)),
      );
    }
    return $blocks;
  }
  else if ($op == 'view') {
    if (is_numeric($delta)) {
      $block = array();
      $shoutbox = node_load($delta);
      if ($shoutbox && node_access('view', $shoutbox)) {
        $block['subject'] = check_plain($shoutbox->title);
        $block['content'] = drupal_get_form('messaging_shoutbox_shoutform', $shoutbox, array('args' => array($shoutbox->nid)));
      }
      return $block;
    }
  }
}

/**
 * New shoutbox form.
 *
 * @param $form_state
 *   The FAPI form state array.
 * @param $shoutbox
 *   The shoutbox node object to which shouts will be related.
 * @param $view_name
 *   Optional: The view name for rendered shouts. Needed to AJAX update the view
 *   in question.
 * @param $view_display
 *   Optional: The view display for rendered shouts.
 * @param $rendered
 *   Optional: A rendered view of shouts. If omitted, a default view will be used.
 */
function messaging_shoutbox_shoutform($form_state, $shoutbox, $view_name = 'messaging_shoutbox', $view_display = 'block_1', $rendered = NULL) {
  $form = array('#theme' => 'messaging_shoutbox_shoutform');

  // Form values to pass thru
  $form['nid'] = array('#type' => 'hidden', '#value' => $shoutbox->nid);
  $form['view'] = array(
    '#type' => 'hidden',
    '#value' => "{$view_name}:{$view_display}",
    '#attributes' => array('class' => 'messaging-shoutbox-shoutform-view')
  );

  $wrapper = 'messaging-shoutbox-wrapper-'. $shoutbox->nid;

  $form['shout'] = array(
    '#type' => 'textarea',
    '#required' => TRUE,
    '#resizable' => FALSE,
    '#rows' => 2,
  );
  $form['shoutbox_submit'] = array(
    '#type' => 'submit',
    '#value' => t('Shout'),
    '#ahah' => array(
      'path' => 'shoutbox/js/shout',
      'wrapper' => $wrapper,
      'method' => 'replace',
      'effect' => 'none',
    ),
  );
  $form['shoutbox'] = array(
    '#value' => !isset($rendered) ? views_embed_view('messaging_shoutbox', 'block_1') : $rendered,
    '#prefix' => "<div class='shoutbox-list'>",
    '#suffix' => "</div>",
  );
  // Dummy wrapper to trigger Views AJAX behavior.
  $form['wrapper'] = array(
    '#type' => 'markup',
    '#value' => "<div id='{$wrapper}'></div>",
  );

  // Limit visibility for post controls
  $form['shout']['#access'] = $form['shoutbox_submit']['#access'] = user_access('post messages to shoutbox');
  return $form;
}

/**
 * Form submission, in case there's no js
 */
function messaging_shoutbox_shoutform_submit($form, $form_state) {
  global $user;
  messaging_shoutbox_shout($form_state['values']['nid'], array('text' => $form_state['values']['shout'], 'uid' => $user->uid));
}

/**
 * Get full list of shoutboxes
 */
function messaging_shoutbox_list($field = NULL) {
  $list = array();
  $result = db_query("SELECT n.nid, n.title FROM {node} n WHERE n.type = 'shoutbox'");
  while ($item = db_fetch_object($result)) {
    $list[$item->nid] = $field ? $item->$field: $item;
  }
  return $list;
}

/**
 * Implementation of hook_views_api().
 */
function messaging_shoutbox_views_api() {
  return array('api' => 2);
}

/**
 * Implementation of hook_theme().
 */
function messaging_shoutbox_theme() {
  return array('messaging_shoutbox_shoutform' => array());
}

/**
 * Shoutbox form theme function.
 */
function theme_messaging_shoutbox_shoutform($form) {
  drupal_add_js(drupal_get_path('module', 'messaging_shoutbox') .'/messaging_shoutbox.js');

  $output = "<div class='shoutform'>";
  $input = drupal_render($form['shout']) . drupal_render($form['shoutbox_submit']);
  $output .= "<div class='shoutbox-input clear-block'>{$input}</div>";
  $output .= drupal_render($form['shoutbox']);
  $output .= drupal_render($form);
  $output .= "</div>";
  return $output;
}
